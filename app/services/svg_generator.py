import base64
import numpy as np
from typing import List, Dict, Any
from app.models.schemas import LandmarkPoint
import logging

logger = logging.getLogger(__name__)


class SVGGenerator:
    def __init__(self):
        self.region_styles = {
            1: {"fill": "rgba(255,0,0,0.3)", "stroke": "red", "stroke-dasharray": "5,5"},
            2: {"fill": "rgba(0,255,0,0.3)", "stroke": "green", "stroke-dasharray": "5,5"},
            3: {"fill": "rgba(0,0,255,0.3)", "stroke": "blue", "stroke-dasharray": "5,5"},
            4: {"fill": "rgba(255,255,0,0.3)", "stroke": "yellow", "stroke-dasharray": "5,5"},
        }

    def create_smooth_path(self, points: List[LandmarkPoint]) -> str:
        """Create smooth SVG path from points"""
        if len(points) < 3:
            return ""

        # Convert to numpy for processing
        coords = np.array([[p.x, p.y] for p in points])

        # Simple smoothing - you can implement more sophisticated smoothing here
        path_commands = []

        # Start with move to first point
        path_commands.append(f"M {coords[0][0]:.2f} {coords[0][1]:.2f}")

        # Create smooth curve (simplified - you might want cubic bezier)
        for i in range(1, len(coords)):
            path_commands.append(f"L {coords[i][0]:.2f} {coords[i][1]:.2f}")

        # Close path
        path_commands.append("Z")

        return " ".join(path_commands)

    def generate_svg(self, contours: Dict[int, List[LandmarkPoint]],
                     image_width: int, image_height: int) -> str:
        """Generate SVG with contour overlays"""

        svg_content = [
            f'<svg width="{image_width}" height="{image_height}" xmlns="http://www.w3.org/2000/svg">',
            '<!-- Generated by Facial SVG Service -->'
        ]

        # Add contours for each region
        for region_id, points in contours.items():
            if len(points) < 3:
                continue

            style = self.region_styles.get(region_id, self.region_styles[1])
            path_data = self.create_smooth_path(points)

            if path_data:
                svg_content.append(
                    f'<path d="{path_data}" '
                    f'fill="{style["fill"]}" '
                    f'stroke="{style["stroke"]}" '
                    f'stroke-width="2" '
                    f'stroke-dasharray="{style["stroke-dasharray"]}" '
                    f'fill-rule="evenodd"/>'
                )

        svg_content.append('</svg>')

        svg_string = "\n".join(svg_content)
        logger.info(f"Generated SVG with {len(contours)} regions")

        return svg_string

    def encode_svg_to_base64(self, svg_string: str) -> str:
        """Encode SVG string to base64"""
        svg_bytes = svg_string.encode('utf-8')
        return base64.b64encode(svg_bytes).decode('utf-8')